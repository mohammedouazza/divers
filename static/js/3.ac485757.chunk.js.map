{"version":3,"sources":["../node_modules/@material-ui/core/esm/Card/Card.js","../node_modules/@material-ui/core/esm/CardActionArea/CardActionArea.js","../node_modules/@material-ui/core/esm/CardContent/CardContent.js","../node_modules/@material-ui/core/esm/CardActions/CardActions.js","components/games/PlaySingle.jsx"],"names":["Card","React","props","ref","classes","className","_props$raised","raised","other","_objectWithoutProperties","Paper","_extends","clsx","root","elevation","withStyles","overflow","name","CardActionArea","children","focusVisibleClassName","ButtonBase","focusVisible","focusHighlight","theme","display","textAlign","width","opacity","palette","action","hoverOpacity","pointerEvents","position","top","right","bottom","left","borderRadius","backgroundColor","transition","transitions","create","duration","short","CardContent","_props$component","component","Component","padding","paddingBottom","CardActions","_props$disableSpacing","disableSpacing","spacing","alignItems","marginLeft","CardMedia","lazy","useStyles","makeStyles","maxWidth","marginBottom","media","height","connect","state","nightMode","game","handleOpenModal","effect","in","style","transitionDelay","id","item","xs","to","textDecoration","fallback","image","img","title","gutterBottom","variant","color","score","size","onClick"],"mappings":"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","file":"static/js/3.ac485757.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden'\n  }\n};\nvar Card = /*#__PURE__*/React.forwardRef(function Card(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$raised = props.raised,\n      raised = _props$raised === void 0 ? false : _props$raised,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"raised\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : 1,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   */\n  raised: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCard'\n})(Card);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'block',\n      textAlign: 'inherit',\n      width: '100%',\n      '&:hover $focusHighlight': {\n        opacity: theme.palette.action.hoverOpacity\n      },\n      '&$focusVisible $focusHighlight': {\n        opacity: 0.12\n      }\n    },\n\n    /* Pseudo-class applied to the ButtonBase root element if the action area is keyboard focused. */\n    focusVisible: {},\n\n    /* Styles applied to the overlay that covers the action area when it is keyboard focused. */\n    focusHighlight: {\n      overflow: 'hidden',\n      pointerEvents: 'none',\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      borderRadius: 'inherit',\n      opacity: 0,\n      backgroundColor: 'currentcolor',\n      transition: theme.transitions.create('opacity', {\n        duration: theme.transitions.duration.short\n      })\n    }\n  };\n};\nvar CardActionArea = /*#__PURE__*/React.forwardRef(function CardActionArea(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      focusVisibleClassName = props.focusVisibleClassName,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"focusVisibleClassName\"]);\n\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    className: clsx(classes.root, className),\n    focusVisibleClassName: clsx(focusVisibleClassName, classes.focusVisible),\n    ref: ref\n  }, other), children, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.focusHighlight\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActionArea.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardActionArea'\n})(CardActionArea);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  }\n};\nvar CardContent = /*#__PURE__*/React.forwardRef(function CardContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardContent'\n})(CardContent);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 8\n  },\n\n  /* Styles applied to the root element if `disableSpacing={false}`. */\n  spacing: {\n    '& > :not(:first-child)': {\n      marginLeft: 8\n    }\n  }\n};\nvar CardActions = /*#__PURE__*/React.forwardRef(function CardActions(props, ref) {\n  var _props$disableSpacing = props.disableSpacing,\n      disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,\n      classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"disableSpacing\", \"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, !disableSpacing && classes.spacing),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActions.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the actions do not have additional margin.\n   */\n  disableSpacing: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardActions'\n})(CardActions);","import React, { Suspense, lazy } from \"react\";\r\nimport {\r\n  Card,\r\n  CardActionArea,\r\n  CardActions,\r\n  CardContent,\r\n  Button,\r\n  Typography,\r\n  Zoom,\r\n  makeStyles,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst CardMedia = lazy(() => import(\"@material-ui/core/CardMedia\"));\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 345,\r\n    marginBottom: 10,\r\n  },\r\n  media: {\r\n    height: 140,\r\n  },\r\n}));\r\n\r\nconst PlaySingle = ({ game, handleOpenModal, effect, nightMode }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Zoom\r\n      in={true}\r\n      key={game.id}\r\n      style={{ transitionDelay: effect ? `${game.id * 100}ms` : \"0ms\" }}\r\n    >\r\n      <Grid item xs={3}>\r\n        <Card\r\n          className={classes.root}\r\n          style={{ backgroundColor: nightMode ? \"#212121\" : \"\" }}\r\n        >\r\n          <CardActionArea>\r\n            <Link\r\n              to={`/play/${game.id}`}\r\n              style={{\r\n                textDecoration: \"none\",\r\n              }}\r\n            >\r\n              <Suspense fallback={<div>loading...</div>}>\r\n                <CardMedia\r\n                  className={classes.media}\r\n                  image={game.img}\r\n                  title={game.name}\r\n                />\r\n              </Suspense>\r\n              <CardContent>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"h5\"\r\n                  component=\"h2\"\r\n                  style={{ color: nightMode ? \"white\" : \"black\" }}\r\n                >\r\n                  {game.name}\r\n                </Typography>\r\n                <Typography\r\n                  variant=\"body2\"\r\n                  color=\"textSecondary\"\r\n                  component=\"p\"\r\n                  style={{ color: nightMode ? \"white\" : \"black\" }}\r\n                >\r\n                  Score: {game.score}\r\n                </Typography>\r\n              </CardContent>\r\n            </Link>\r\n          </CardActionArea>\r\n          <CardActions>\r\n            <Link to={`/play/${game.id}`} style={{ textDecoration: \"none\" }}>\r\n              <Button size=\"small\" color=\"primary\">\r\n                Play\r\n              </Button>\r\n            </Link>\r\n            <Button\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              onClick={() => handleOpenModal(game.name)}\r\n            >\r\n              Learn More\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n      </Grid>\r\n    </Zoom>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    nightMode: state.nightMode.nightMode,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(PlaySingle);\r\n"],"sourceRoot":""}